/*
Noting that there could be two "modes" for the final product, one which is visual and one which is invisible (the latter has some specific benefits actually).

1. start_recording(): records the current timestamp
    bount to ctrl+b

2. stop_recording(): records both the current timestamp and the difference between the start recording time and the current time (e.g. and offset)
record_line(): records the current cell number, the current line number in that cell, the timestamp, an offset from the start, and the text of the current line whenever a cell is executed

3. record_execution(), which identifies which cell, the full text of the cell, the timestamp, and an offset

4. show_log() which opens up the comma separated log file so I could copy and paste it elsewhere.
    should also be shown on stop_recording().
*/

// FIXME: need to go to end of line when recordLine is called on last line
// FIXME: need to execute cell if cursor on end of line and recordLine is called

define([
    'jquery',
    'base/js/namespace',
    'require',
    './module/helperFuncs'
], function (
    $,
    Jupyter,
    require,
    helpers
) {
    "use strict";

    let startTime = 0;

    let recording = false;

    let logFile = [];

    let lastEvent = 0;

    let mistakeNumber = 0;

    // get sound from files
    let startSound = new Audio('../nbextensions/recordingStart.wav');

    function timeFromPrevious(eventTime) {
        // helper function for calculating time from the last event
        let diff = eventTime - lastEvent;

        lastEvent = eventTime;

        return diff;
    }

    function logInfo(data) {
        // helper function for logging
        // need to add timestamp, offset-from-start, offset-from-previous
        let timestamp = Date.now();
        data['from_start'] = timestamp - startTime;
        data['from_previous'] = timeFromPrevious(timestamp);

        console.log(data);
        // add data to logFile
        logFile.push(JSON.stringify(data, null, "\t"));
    }

    function getCellIndex(cell_id) {
        // Helper function that returns the index of a cell
        let cellIndex = -1;

            // find out which cell was executed
            for (let i = 0; i < Jupyter.notebook.get_cells().length; ++i) {
                // use the cell_id field of data.cell
                if (cell_id === Jupyter.notebook.get_cell(i).cell_id) {
                    cellIndex = i;
                    break;
                }
            }
        return cellIndex;
    }

    function startStopRecording() {
        // Function that stops and starts recording

        if (!recording) {
            // start recording
            // Grab the starting time and set startTime
            startTime = Date.now();
            lastEvent = startTime;
            recording = true;

            mistakeNumber = 0;
            
            // empty log file
            logFile = [];

            logInfo({
                    'type': 'start',
                    'email': '',
                    'timestamp': "Started Recording at " + new Date(startTime)}
                );

            // change symbol of record button to stop symbol and make background red
            $('#record-btn').css('background-color', 'red');
            $($('#record-btn').children()[0]).addClass('fa-stop').removeClass('fa-play');

            startSound.play();
        }
        else {
            // end recording and print out log
            // print out current timestamp and difference between start recording time and current time
            recording = false;
            let endTime = Date.now();

            //change symbol of record button to play and make background white
            $('#record-btn').css('background-color', 'white');
            $($('#record-btn').children()[0]).addClass('fa-play').removeClass('fa-stop');

            logInfo({
                'type': 'end',
                "timestamp": "Ended recording at " + new Date(endTime),
                "total recording time": helpers.msToTime(Math.floor(endTime - startTime))
            });
            
            // call downloadLog
            downloadLogFile();
        }
    }

    function recordLine(e) {
        /* Logs:
                * current cell number
                * current line number in that cell
                * text of the current line
                * timestamp
                * offset from the start
        */

        // need to bind it to down arrow
        // if on last line of cell, then execute cell and move to the next one if there is one
        if (recording && Jupyter.notebook.mode === "edit") {
            // grab the currently selected cell
            let cell = Jupyter.notebook.get_selected_cell();

            let cursorInfo = cell.code_mirror.getCursor();

            // get the current line number
            let lineNumber = cursorInfo.line;

            // get the line text
            let lineText = cell.code_mirror.doc.getLine(lineNumber);

            let infoToLog = {
                        'type': 'Line',
                        'cell index': getCellIndex(cell.cell_id),
                        'cell type': cell.cell_type,
                        'line number': lineNumber + 1,
                        'line text': lineText,
                        'move cursor': false,
                        'next cell': false
                        }

            // if on last line, then execute cell and move to next cell
            // need to check if at end of line
            if ((lineNumber + 1) === cell.code_mirror.lineCount()) {
                if (cell.code_mirror.getLine(lineNumber).length !== cursorInfo.ch) {
                    // set cursor to end of line
                    let newCursor = {line: lineNumber, ch: cell.code_mirror.getLine(lineNumber).length};
                    cell.code_mirror.setCursor(newCursor);

                    // append tag to infoToLog that the cursor was put to end of line
                    infoToLog["move cursor"] = true;
                    logInfo(infoToLog);
                }
                else {
                    infoToLog["next cell"] = true;
                    logInfo(infoToLog);

                    // execute cell
                    cell.execute();

                    // move to next cell
                    Jupyter.notebook.select_next();

                    // enter the cell
                    Jupyter.notebook.edit_mode();

                    // set cursor to first line
                    let nextCell = Jupyter.notebook.get_selected_cell();
                    nextCell.code_mirror.setCursor({line: 0, ch: 0});

                    // scroll to the cell
                    Jupyter.notebook.scroll_to_cell(getCellIndex(nextCell.cell_id));
                }
            }
            else {
                // move down a line
                let newCursor = {line: cursorInfo.line + 1, ch: 0};
                cell.code_mirror.setCursor(newCursor);
                logInfo(infoToLog);
            }
        }
    }

    function recordMistake() {
        // makes a note when there is a mistake
        if (recording) {
            // increment mistake number
            mistakeNumber++;

            logInfo({
                'type': 'annotation',
                'annotation number': mistakeNumber
            });
        }
    }

    function recordExecution() {
        // watch for execution of code cells
        Jupyter.notebook.events.on('execute.CodeCell', (evt, data) => {
            /*
                data contains the following:
                    cell: CodeCell object
            */
            if (recording) {
                let cellIndex = getCellIndex(data.cell.cell_id);

                let timestamp = Date.now();

                logInfo({
                    'type': 'Execution',
                    'cell index': cellIndex
                    //'cell text': data.cell.get_text()
                });
            }
        });
    }

    function recordRender() {
        // watch for render event
        Jupyter.notebook.events.on('rendered.MarkdownCell', (evt, data) => {
            /*
                data contains the following:
                    cell: MarkdownCell
            */
           if (recording) {
               let cellIndex = getCellIndex(data.cell.cell_id);
               let timestamp = Date.now();

               logInfo({
                'type': 'Render',
                'cell index': cellIndex,
                'cell text': data.cell.get_text()
            });
           }
        });
    }

    function download(filename, text) {
        // From https://stackoverflow.com/questions/45831191/generate-and-download-file-from-js
        let element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);

        element.style.display = 'none';
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
    }

    function downloadLogFile() {
        // Downloads the log file when the button is clicked or when done recording

        // get date and time for the filename
        let newDate = new Date();
        let timestamp = parseInt(newDate.getMonth()+1) + '-' + newDate.getDate() + '-' + newDate.getFullYear() + '-' + newDate.getHours() + '_' + newDate.getMinutes();

        if (logFile.length !== 0) {
            download("logs_" + timestamp, logFile);
        }
    }

    function toggleButtons() {
        // Toggles the visibility of the toolbar buttons
        $('#record-btn').toggle();
        $('#download-log-btn').toggle();
    }

    function load_ipython_extension(){
        // set up link to css file
        let link = document.createElement("link");
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = require.toUrl('./jupyter_authoring.css');
        document.getElementsByTagName("head")[0].appendChild(link);

        // add shortcut for startRecording to Ctrl + B
        Jupyter.keyboard_manager.command_shortcuts.add_shortcut('Ctrl-b', startStopRecording);
        Jupyter.keyboard_manager.edit_shortcuts.add_shortcut('Ctrl-b', startStopRecording);

        // add shortcut for recording codemirror line to down arrow (40)
        Jupyter.keyboard_manager.edit_shortcuts.add_shortcut('Ctrl-j', recordLine);
        //$(document).keydown(recordLine);

        // add shortcut for hiding buttons
        Jupyter.keyboard_manager.edit_shortcuts.add_shortcut('Ctrl-shift-k', toggleButtons);
        Jupyter.keyboard_manager.command_shortcuts.add_shortcut('Ctrl-shift-k', toggleButtons);

        // add shortcut for downloading log
        Jupyter.keyboard_manager.edit_shortcuts.add_shortcut("Ctrl-shift-'", downloadLogFile);
        Jupyter.keyboard_manager.command_shortcuts.add_shortcut("Ctrl-shift-'", downloadLogFile);

        // add shortcut for mistake key
        Jupyter.keyboard_manager.edit_shortcuts.add_shortcut("Ctrl-shift-a", recordMistake);
        Jupyter.keyboard_manager.command_shortcuts.add_shortcut("Ctrl-shift-a", recordMistake);

        // call function to record execution when recording
        recordExecution();

        // function to record rendered markdown
        recordRender();

        // add record button
        Jupyter.toolbar.add_buttons_group([{
            label: 'Record',
            icon: 'fa-play',
            id: 'record-btn',
            callback: startStopRecording
        }]);

        // add download log button
        Jupyter.toolbar.add_buttons_group([{
            label: 'Download Log',
            icon: 'fa-download',
            id: 'download-log-btn',
            callback: downloadLogFile
        }]);


        // hide buttons by default
        toggleButtons();
    }
    return {
        load_ipython_extension: load_ipython_extension
    };
});